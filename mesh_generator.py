import numpy as np

from panel import Panel

class Mesh():
    def __init__(self,n:list,m:list,leading_edges:list,chords:list):
        self.n=n
        self.m=np.array(m)
        self.leading_edges=np.array(leading_edges)
        self.chords=np.array(chords)

        self.points=None
        self.panels=None

    def calc_points(self):
        """
        Points are generated by section, then spanwise, then chordwise.
        """
        N_points=(sum(self.m)+1)*(self.n+1)
        points=np.zeros([N_points,3])   #   empty array for (x,y) point coordinates

        point_count=0
        for i in range(self.n+1):   #   loops through chordwise splits
            for s in range(len(self.m)):    #   loops through sections i.e. where chord, leading edge coordinates, and m change.
                dx_P1=i*self.chords[s,0]/self.n
                dx_P2=i*self.chords[s,1]/self.n

                P1=self.leading_edges[s,0]+(dx_P1,0,0)  #   shifts start and end coordinates of spanwise split down chord
                P2=self.leading_edges[s,1]+(dx_P2,0,0)
                P1P2=P2-P1

                for j in range(self.m[s]+1):    #   loops through spanwise splits
                    if j==0 and s!=0:           #   skips double generating points at connection between sections
                        continue
                    else:
                        t=j/(self.m[s])         #   line vector rquation

                        points[point_count]=t*P1P2+P1
                        point_count+=1
        
        """
        ## Generate mirror
        mirror_points=[]
        for point in points:
            if point[1]!=0:
                x=point[0]
                y=-point[1]
                z=point[2]
                mirror_points.append((x,y,z))

        points=np.append(points,mirror_points,axis=0)
        """
        
        self.points=points

        return self.points

    def calc_panels(self):
        """
        Panels are generated spanwise, then chordwise. Sections are ignored.
        Panel definition: 

        P1--P2 -> y
        :  :
        P4--P3
        |
        x
        
        """
        panels=[]
        N_span=sum(self.m)
        for i in range(self.n):     #   chordwise elements
            for j in range(N_span):    #   spanwise elements
                n=j+(N_span+1)*i
                P1=self.points[n]
                P2=self.points[n+1]
                P3=self.points[n+N_span+2]
                P4=self.points[n+N_span+1]

                panels.append(Panel(P1,P2,P3,P4))
        
        self.panels=panels

        return self.panels